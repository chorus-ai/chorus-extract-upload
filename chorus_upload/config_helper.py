import tomli


# print authentication help info
def _print_config_usage(args, config, journal_fn):
    print("The script requires a configuration file (config.toml file in the script chorus_upload directory) to be populated.")
    print("This file can be generated by filling in the config.toml.template file.")
    print("")
    print("The config.toml file contains 4 sections, each contains one or more paths, and each path can be local or cloud storage.")
    print("[configuration]:  contains the global settings for the installation, for example specifying supported data modalities.")
    print("[journal]:  contains the path to the journal file.  This file will typically be in the azure container.")
    print("[central_path]:  contains the path to the default central storage location.  This is where the files will be uploaded to.")
    print("[site_path]:  contains the path to the default DGS storage location.  This is where the files will be uploaded from.")
    print("Site_path may contain subsections for each modality, for example [site_path.Waveforms].  This allows different modality files to be stored in different locations")
    print("")    
    print("For each section or subsection, if the path is a cloud path, e.g. s3:// or az://, then the following parameters are required for authentication.")
    print("Authentication is only needed for update, upload, and verify commands Local file system is assumed to not require authentication.")
    print("")
    print("  AWS:   in order of precedence")
    print("         aws-session-token  (temporary credential)")
    print("         aws-access-key-id, aws-secre-access-key.  (may be set as env-vars AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)")
    print("         aws-profile.  see aws/credentials files in home directory")
    print("         if none specified, profile `default` is used.")
    print("  Azure: in order of precedence")
    print("         account-url with embedded sas token")
    print("         azure-account-name, azure-sas-token.  constructs an account-url")
    print("         azure-storage_connection_string.")
    print("         azure-account-name, azure-account-key. constructs a connection string")
    print("         connection string can be set as a environment variable: AZURE_STORAGE_CONNECTION_STRING")
    # print("  Google: (UNTESTED) requires google-application-credentials")
    # print("         application credentials may be specified on the commandline, or as an environment variable (see subcommand help)")


def load_config(configifle: str):
    with open(configifle, 'rb') as file:
        config = tomli.load(file)
    return config

def get_journal_config(config: dict):
    return config['journal']

def get_central_config(config: dict):
    return config['central_path']

def get_config(config: dict):
    return config['configuration']

def get_modalities(config: dict):
    subconfig = config['configuration']
    return subconfig.get('supported_modalities', "OMOP,Waveforms,Images").split(',')

def get_journal_path(config: dict):
    subconfig = config['journal']
    return subconfig.get('path', "journal.db")

def get_journal_local_path(config: dict):
    cloud_path = config['journal'].get('path', "journal.db")
    is_cloud = cloud_path.startswith("s3://") or cloud_path.startswith("az://") or cloud_path.startswith("gs://")
    cloud_derived = cloud_path.split("/")[-1]
    # if local_path defined, use it.  else if path is cloud, use the file name, else use cloud_path.
    return config['journal'].get('local_path', cloud_derived if is_cloud else cloud_path)

def get_upload_methods(config: dict):
    subconfig = config['configuration']
    return subconfig.get('upload_methods', 'builtin')

def get_journaling_mode(config: dict):
    subconfig = config['configuration']
    return subconfig.get('journaling_mode', 'append')

def get_site_config(config: dict, modality: str):
    subconfig = config['site_path']
    out = subconfig.get(modality, subconfig.get('default', None))
    if out is None:
        raise ValueError("No site path for modality not found in config file")
    return out

def get_auth_param(config: dict, key: str):
    return config.get(key, None)
